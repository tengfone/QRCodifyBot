const dotenv = require('dotenv');
const { Composer, Markup, Scenes, session, Telegraf } = require("telegraf");
const QRCode = require('easyqrcodejs-nodejs');

const API_TOKEN = process.env.API_TOKEN;
const PORT = process.env.PORT || 2000;
const URL = process.env.URL;


dotenv.config();

// Local
// const bot = new Telegraf(process.env.BOT_TOKEN)

// Heroku
const bot = new Telegraf(API_TOKEN);

const stepHandler = new Composer();

stepHandler.action('custom', async (ctx) => {
    return ctx.scene.enter("custom");
});

stepHandler.action('plain', async (ctx) => {
    return ctx.scene.enter("plain");
});

stepHandler.command('start', async (ctx) => {
    return ctx.scene.enter("mainMenu");
});

stepHandler.use((ctx) => ctx.replyWithMarkdown('Invalid Command, Please press the button or /start to restart'));

const plainQR = new Scenes.WizardScene('plain', async (ctx) => {
    await ctx.reply("Enter URL for a plain QR Code:")
    return ctx.wizard.next();
}, async (ctx, done) => {
    ctx.scene.session.plainInput = ctx.message.text
    if (ctx.message.text === undefined) {
        ctx.reply("Enter text only")
        return done();
    }
    plainQRString = getInlineQRCode(ctx.scene.session.plainInput)
    try {
        await ctx.telegram.sendPhoto(ctx.chat.id, plainQRString, {
            caption: `QRCode Generated by @QRCodifyBot with text:\n${ctx.message.text}`
        })
        return await ctx.scene.enter("mainMenu");
    } catch (err) {
        await ctx.reply("Something Went Wrong, Please contact @tengfone")
        return await ctx.scene.enter("mainMenu")
    }
}
)

const stepHandlerCustom = new Composer();
stepHandlerCustom.on('photo', async (ctx) => {
    userUploadedPhoto = ctx.message.photo
    fileId = userUploadedPhoto[0].file_id
    ctx.telegram.getFileLink(fileId).then(url => {
        ctx.scene.session.userLogo = url.href
    })
    await ctx.reply('Photo Recieved',
        Markup.inlineKeyboard([
            [
                Markup.button.callback('Next', 'qrnext')
            ],
        ]
        )
    );
    return ctx.wizard.next();
});

stepHandlerCustom.action('qrnext', (ctx) => {
    return ctx.wizard.next();
});

stepHandlerCustom.use((ctx) => ctx.replyWithMarkdown('Send me your logo image!'));

const customQR = new Scenes.WizardScene('custom', stepHandlerCustom, (ctx) => {
    ctx.reply("Enter Your URL: ")
    return ctx.wizard.next();
}, async (ctx) => {
    ctx.scene.session.plainInput = ctx.message.text
    savedFilePath = await QRMaker(ctx.message.from.username, ctx.scene.session.plainInput, ctx.scene.session.userLogo)
    await ctx.telegram.sendPhoto(ctx.from.id, {
        source: `${savedFilePath}`
    }, {
        caption: `QRCode Generated by @QRCodifyBot with text:\n${ctx.message.text}`
    })
    return await ctx.scene.enter("mainMenu");
}
)

const mainMenu = new Scenes.WizardScene('mainMenu', async (ctx) => {
    await ctx.reply('Welcome to @QRCodifyBot',
        Markup.inlineKeyboard([
            [
                Markup.button.callback('Create Custom QR', 'custom'), Markup.button.callback('Create Plain QR', 'plain')
            ],
            [
                Markup.button.url('About Me', 'http://www.github.com/tengfone')
            ]
        ]
        )
    );
    return ctx.wizard.next();
}, stepHandler, async (ctx) => {
    await ctx.reply("pahef")
    return ctx.scene.leave();
});

// DRIVER CODE
const stage = new Scenes.Stage([mainMenu, plainQR, customQR], {
    // default: 'mainMenu',
});
bot.use(session());
bot.use((ctx, next) => {
    const now = new Date();
    ctx.myContextProp = now.toString();
    return next();
});
bot.use(stage.middleware());

// Enable graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

// HELP
bot.help((ctx) => ctx.reply('Contact @tengfone'))

// Inline
bot.on('inline_query', async (ctx) => {
    username = ctx.inlineQuery.from.username
    inputText = ctx.inlineQuery.query
    inlineQR = getInlineQRCode(inputText)
    result = [{
        type: `photo`,
        id: 1,
        photo_url: inlineQR,
        thumb_url: inlineQR,
        caption: `QR Generated by @QRCodifyBot.\nFor more options, visit @QRCodifyBot`
    }]
    ctx.answerInlineQuery(result)
})

// START
bot.start((ctx) => {
    return ctx.scene.enter("mainMenu")
})

// Polling for local
bot.telegram.setWebhook(`${URL}/bot${API_TOKEN}`);
bot.startWebhook(`/bot${API_TOKEN}`, null, PORT);
bot.launch();

// Enable graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'))
process.once('SIGTERM', () => bot.stop('SIGTERM'))

// ================FUNCTIONS==============
function getInlineQRCode(inputText) {
    url = `https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=${inputText}`
    return url
}

async function QRMaker(username, inputtedText, customLogo) {
    var options = {
        // ====== Basic
        text: `${inputtedText}`,
        width: 400,
        height: 400,
        colorDark: "#000000",
        colorLight: "#ffffff",
        correctLevel: QRCode.CorrectLevel.H,
        logo: `${customLogo}`,
        logoBackgroundTransparent: false,
        logoBackgroundColor: '#FFF8DC',
        quietZone: 15,
        quietZoneColor: '#00CED1',
        // === Posotion Pattern(Eye) Color
        PI: '#BF3030',
        PO: '#269926',

        PI_TL: '#b7d28d', // Position Inner - Top Left 
        PO_TL: '#aa5b71', // Position Outer - Top Right
        AO: '#336699',  // Position Outer - Bottom Right
        AI: '#336699',  // Position Inner - Bottom Right

        // === Aligment color
        AI: '#009ACD',
        AO: '#B03060',

        // === Timing Pattern Color
        //	timing: '#e1622f', // Global Timing color. if not set, the defaut is `colorDark`
        timing_H: '#ff6600', // Horizontal timing color
        timing_V: '#cc0033',// Vertical timing color
        // ====== dotScale
        /*
        dotScale: 1, // For body block, must be greater than 0, less than or equal to 1. default is 1
        
        dotScaleTiming: 1, // Dafault for timing block , must be greater than 0, less than or equal to 1. default is 1
        dotScaleTiming_H: undefined, // For horizontal timing block, must be greater than 0, less than or equal to 1. default is 1
        dotScaleTiming_V: undefined, // For vertical timing block, must be greater than 0, less than or equal to 1. default is 1
        
        dotScaleA: 1, // Dafault for alignment block, must be greater than 0, less than or equal to 1. default is 1
        dotScaleAO: undefined, // For alignment outer block, must be greater than 0, less than or equal to 1. default is 1
        dotScaleAI: undefined, // For alignment inner block, must be greater than 0, less than or equal to 1. default is 1
        */

        // ====== Quiet Zone
        /*
        quietZone: 0,
        quietZoneColor: "rgba(0,0,0,0)",
        */

        // ====== Logo
        /*
        logo:"../demo/logo.png", // Relative address, relative to `easy.qrcode.min.js`
        logo:"http://127.0.0.1:8020/easy-qrcodejs/demo/logo.png", 
        logoWidth:80, // width. default is automatic width
        logoHeight:80, // height. default is automatic height
        logoBackgroundColor:'#fffff', // Logo backgroud color, Invalid when `logBgTransparent` is true; default is '#ffffff'
        logoBackgroundTransparent:false, // Whether use transparent image, default is false
        */

        // ====== Backgroud Image
        /*
        backgroundImage: '', // Background Image
        backgroundImageAlpha: 1, // Background image transparency, value between 0 and 1. default is 1. 
        autoColor: false, // Automatic color adjustment(for data block)
        autoColorDark: "rgba(0, 0, 0, .6)", // Automatic color: dark CSS color
        autoColorLight: "rgba(255, 255, 255, .7)", // Automatic color: light CSS color
        */

        // ====== Colorful
        // === Posotion Pattern(Eye) Color
        /*
        PO: '#e1622f', // Global Posotion Outer color. if not set, the defaut is `colorDark`
        PI: '#aa5b71', // Global Posotion Inner color. if not set, the defaut is `colorDark`
        PO_TL:'', // Posotion Outer color - Top Left 
        PI_TL:'', // Posotion Inner color - Top Left 
        PO_TR:'', // Posotion Outer color - Top Right 
        PI_TR:'', // Posotion Inner color - Top Right 
        PO_BL:'', // Posotion Outer color - Bottom Left 
        PI_BL:'', // Posotion Inner color - Bottom Left 
        */
        // === Alignment Color
        /*
        AO: '', // Alignment Outer. if not set, the defaut is `colorDark`
        AI: '', // Alignment Inner. if not set, the defaut is `colorDark`
        */
        // === Timing Pattern Color
        /*
        timing: '#e1622f', // Global Timing color. if not set, the defaut is `colorDark`
        timing_H: '', // Horizontal timing color
        timing_V: '', // Vertical timing color
        */

        // ====== Title
        /*
        title: 'QR Title', // content 
        titleFont: "bold 18px Arial", //font. default is "bold 16px Arial"
        titleColor: "#004284", // color. default is "#000"
        titleBackgroundColor: "#fff", // background color. default is "#fff"
        titleHeight: 70, // height, including subTitle. default is 0
        titleTop: 25, // draws y coordinates. default is 30
        */

        // ====== SubTitle
        /*
        subTitle: 'QR subTitle', // content
        subTitleFont: "14px Arial", // font. default is "14px Arial"
        subTitleColor: "#004284", // color. default is "4F4F4F"
        subTitleTop: 40, // draws y coordinates. default is 0
        */

        // ===== Event Handler
        /*
        onRenderingStart: undefined,
        */

        // ==== Images format
        /*
        format: 'PNG', // 'PNG', 'JPG'
        compressionLevel: 6, // ZLIB compression level (0-9). default is 6
        quality: 0.75, // An object specifying the quality (0 to 1). default is 0.75. (JPGs only) 
        */

        // ==== Versions
        /*
        version: 0, // The symbol versions of QR Code range from Version 1 to Version 40. default 0 means automatically choose the closest version based on the text length.
        */

        // ===== Binary(hex) data mode
        /*
        binary: false // Whether it is binary mode, default is text mode. 
        */
    }

    // New instance with options
    var qrcode = new QRCode(options);
    savedFileName = `${username}.jpeg`
    savedFilePath = `./generatedQRCodes/${savedFileName}`

    // Save QRCode image
    await qrcode.saveImage({
        path: `${savedFilePath}` // save path
    });

    return savedFilePath
}

